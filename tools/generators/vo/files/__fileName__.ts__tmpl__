import {DeepReadonly} from "json-schema-to-ts/lib/types/type-utils/readonly";
import {FromSchema} from "json-schema-to-ts";
import {makeValueObject} from "@app/messaging/value-object";
import {Writable} from "json-schema-to-ts/lib/types/type-utils";
import definitions from "@app/<%= service.fileName %>/read-model/types/definitions";
import {references} from "@app/<%= service.fileName %>/read-model/types/references";
import {<%= className %>Schema} from "./<%= fileName %>.schema";

export type <%= className %> = DeepReadonly<FromSchema<
  typeof <%= className %>Schema,
  {references: references}
>>;

export const <%= propertyName %> = makeValueObject<<%= className %>>(
  '<%= service.className %>.<%= dotNamespace %>.<%= className %>',
  <%= className %>Schema as Writable<typeof <%= className %>Schema>,
  definitions,
  (data: Partial<<%= className %>>): <%= className %> => {
    // Initializer: upcast data if needed
    return data as <%= className %>;
  }
);
